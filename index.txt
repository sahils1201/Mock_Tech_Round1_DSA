#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* next;
};

Node* reverse(Node* head) {
    Node* prev = NULL;
    Node* curr = head;
    Node* next = NULL;
    while (curr != NULL) {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    head = prev;
    return head;
}

bool detectLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;
    while (slow && fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            return true;
        }
    }
    return false;
}

void removeLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;
    while (slow && fast && fast->next) {
        slow = slow->next;
        fast = fast->next->next;
        if (slow == fast) {
            break;
        }
    }
    if (slow == head) {
        while (fast->next != slow) {
            fast = fast->next;
        }
        fast->next = NULL;
    } else {
        slow = head;
        while (slow->next != fast->next) {
            slow = slow->next;
            fast = fast->next;
        }
        fast->next = NULL;
    }
}

int main() {
    Node* head = new Node();
    head->data = 1;
    head->next = new Node();
    head->next->data = 2;
    head->next->next = new Node();
    head->next->next->data = 3;
    head->next->next->next = new Node();
    head->next->next->next->data = 4;
    head->next->next->next->next = new Node();
    head->next->next->next->next->data = 5;
    head->next->next->next->next->next = head->next->next;
    if (detectLoop(head)) {
        cout << "Loop detected" << endl;
        removeLoop(head);
        cout << "Loop removed" << endl;
    } else {
        cout << "No loop detected" << endl;
    }
    head = reverse(head);
    Node* curr = head;
    while (curr != NULL) {
        cout << curr->data << " ";
        curr = curr->next;
    }
    cout << endl;
    return 0;
}



#include <iostream>

using namespace std;

struct Node {
    int data;
    Node* next;
};

// Function to reverse a singly linked list in-place
Node* reverseList(Node* head) {
    Node* prev = nullptr;
    Node* current = head;
    Node* next = nullptr;

    while (current != nullptr) {
        next = current->next;
        current->next = prev;
        prev = current;
        current = next;
    }

    return prev; // Return the new head of the reversed list
}

// Function to detect a loop in the linked list using Floyd's cycle-finding algorithm
bool hasLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) {
            return true; // Loop detected
        }
    }

    return false; // No loop
}

// Function to remove a loop from the linked list
void removeLoop(Node* head) {
    Node* slow = head;
    Node* fast = head;

    while (fast != nullptr && fast->next != nullptr) {
        slow = slow->next;
        fast = fast->next->next;

        if (slow == fast) {
            break; // Loop detected
        }
    }

    if (slow == fast) {
        slow = head;

        while (slow->next != fast->next) {
            slow = slow->next;
            fast = fast->next;
        }

        fast->next = nullptr; // Remove the loop
    }
}

int main() {
    Node* head = new Node{1};
    head->next = new Node{2};
    head->next->next = new Node{3};
    head->next->next->next = new Node{4};
    head->next->next->next->next = new Node{5};
    head->next->next->next->next->next = head->next->next; // Create a loop

    cout << "Original Linked List: ";
    Node* temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;

    if (hasLoop(head)) {
        cout << "Loop detected in the linked list." << endl;
        removeLoop(head);
        cout << "Loop removed from the linked list." << endl;
    }

    head = reverseList(head);
    cout << "Reversed Linked List: ";
    temp = head;
    while (temp != nullptr) {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;

    return 0;
}